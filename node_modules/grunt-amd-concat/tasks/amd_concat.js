/*
 * grunt-amd-concat
 * https://github.com/mdolidon/grunt-amd-concat
 *
 * Copyright (c) 2015 Mathias Dolidon
 * Licensed under the GPL license.
 */

'use strict';

var uuid = require('node-uuid');
var path = require('path');
var jsesc = require('jsesc');

function makeLayerHeader() {
    return "require({cache:{";
}


function makeLayerFooter() {
    return "}});\n\ndefine('AMDLayer"+uuid.v4()+"', [], 1);";
}


// PROCESS ONE FILE
// Expects packages sorted by decreasing location path length
function processForAmdCache(sortedPackages, src, filePath) {

    function isJs(aPath) {
        return aPath.lastIndexOf(".js") === aPath.length-3;
    }

    function removeJsExtension(aPath) {
        return  isJs(aPath) ? aPath.slice(0,aPath.length-3) : aPath;
    }

    function toPackagePrefix(aPath) {
        var normalizedPath = path.resolve(process.cwd(), aPath);
        normalizedPath = normalizedPath.replace(/\\/g, "/");  // normalizes separators when building on Windows

        for(var i=0; i<sortedPackages.length; ++i) {
            var normalizedPackageLocation = path.resolve(process.cwd(), sortedPackages[i].location) + '/';
            normalizedPackageLocation = normalizedPackageLocation.replace(/\\/g, "/");  // normalizes separators when building on Windows

            if(normalizedPath.slice(0, normalizedPackageLocation.length) === normalizedPackageLocation) {
                return sortedPackages[i].name + '/' + normalizedPath.slice(normalizedPackageLocation.length);
            }
        }
        throw new Error('Could not resolve a package name for file : ' + filePath); // I know... filePath is in the outer scope
    }                                                                               // Let's act responsibly, this is very small

    function wrapJsContent(src) {
        return 'function () {' + src + '}';
    }
    
    function wrapTextContent(src) {
        return jsesc(src, {quotes:'single', wrap:true});
    }

    function wrapContent(src, aPath) {
        return isJs(aPath) ? wrapJsContent(src) : wrapTextContent(src);
    }

    return '"' + (isJs(filePath) ? '':'url:') +
        toPackagePrefix(removeJsExtension(filePath)) + 
        '":' + wrapContent(src, filePath);
}





//
// ENTRY POINT
//

module.exports = function(grunt) {

    grunt.registerMultiTask('amd_concat', 'Build AMD layers the easy way', function() {
        var options = this.options({
            packages:[]
        });
        

            // Sorts packages by decreasing location length, for proper
            // processing by the name resolver. Longer names are more accurate and therefore 
            // get higher priority. 
            // E.g.
            //  Folder        => Package name
            //  src/app/dgrid => dgrid 
            //  src/app       => app
            //  If we didn't sort by length, src/app/dgrid could get mapped to app/dgrid
        var sortedPackages = options.packages.slice();
        sortedPackages.sort(function(a,b) {return b.location.length - a.location.length;});

        

            // Main loop : one iteration for each target layer

        this.files.forEach(function(f) {

            var layerContent = 
                
                makeLayerHeader() + 

                // f.src matches files to be included in the layer ; we'll loop over those now
                
                // get rid of read errors for non existing files, and directories
                f.src.filter(function(filepath) {
                    if (!grunt.file.exists(filepath)) {
                        grunt.log.warn('Source file "' + filepath + '" not found.');
                        return false;
                    } 
                    else {
                        return grunt.file.isFile(filepath);
                    }
                }).

                // file tranformation
                map(function(filepath) {
                    return processForAmdCache(sortedPackages,
                                              grunt.file.read(filepath),
                                              filepath
                                             );
                }).
                // end of in-layer loop
                
                join(',') + 
                makeLayerFooter();


            grunt.file.write(f.dest, layerContent);
            grunt.log.writeln('File "' + f.dest + '" created.');
        });
        // end of loop over layers
    });
};
